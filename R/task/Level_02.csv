1, "Write a function that takes a variable-length list of numbers and returns a new list containing only the prime numbers."
2, "Create a function that takes a vector of numbers as input, applies a user-defined transformation function to each element, and returns the transformed vector."
3, "Write a function that accepts another function as an argument to filter elements in a vector. Use this to filter even numbers, numbers greater than 10, and multiples of 3."
4, "Define a higher-order function that takes two functions (one for addition, another for multiplication) and a vector, then applies both functions cumulatively to return the result."
5, "Create a function that accepts a matrix and a function (like mean or median) as arguments, applying the function to each column of the matrix and returning a named vector of results."
6, "Write a function that generates Fibonacci numbers recursively. Add memoization to improve the performance and avoid repeated calculations."
7, "Develop a function that takes a list of numerical vectors and returns a single vector with each element scaled by the mean and standard deviation of its respective vector."
8, "Create a function that accepts a string and a function as arguments. Use the function to transform each character in the string, e.g., capitalize vowels or replace spaces with hyphens."
9, "Write a function that implements binary search on a sorted vector. The function should return the index of the target value or -1 if the value is not found."
10, "Implement a recursive function that finds all possible subsets of a given set. Return the subsets as a list of vectors."
11, "Define a function that accepts another function and a range of values. Apply the function to each value in the range and return a data frame with inputs and outputs."
12, "Write a function that uses recursion to count the number of vowels in a string without using any loops."
13, "Create a higher-order function that generates functions for calculating the nth root of a number. For example, generate functions for square root, cube root, etc."
14, "Develop a function that takes two vectors and returns a new function. The returned function should compute the Euclidean distance between two points in n-dimensional space."
15, "Write a function that simulates the roll of two dice n times and returns a function that can be called to retrieve the frequency of each result (sum of two dice)."
16, "Define a function that accepts a list of functions and a data vector. Apply each function to the vector and return a data frame with each functionâ€™s result as a column."
17, "Create a function that takes a nested list of numbers and uses recursion to compute the sum of all elements."
18, "Implement a function that takes two functions and an initial value. The function should repeatedly apply the first function until the result meets a condition defined by the second function."
19, "Write a function that takes a vector of strings and a function, applying the function to each string to perform transformations like removing vowels or reversing the string."
20, "Define a function that accepts a numerical vector and returns a function that, when called, returns a moving average for any window size specified by the user."
21, "Create a function that takes an integer n and returns a function. The returned function should accept a vector and return the n-th largest unique element."
22, "Write a function that takes a list of numbers and returns a function that computes the cumulative sum up to any given index."
23, "Implement a function that performs matrix multiplication by taking two matrices and a function for performing element-wise operations (e.g., addition, subtraction)."
24, "Define a function that takes a function and an integer n. It should apply the function n times in succession to an initial value provided as a second argument."
25, "Create a function that takes a start and end value, generating a random number sequence within the range. The function should return another function that retrieves any n random values from this sequence."
26, "Write a function that calculates the determinant of a square matrix recursively by implementing cofactor expansion."
27, "Develop a function that takes a character string and returns a function that can be called with a substring, returning the number of times the substring appears."
28, "Implement a function that takes two vectors and a function for performing element-wise operations (e.g., sum, product) and returns the vector result."
29, "Write a function that takes a vector and a number n, splitting the vector into n equal parts and returning a list of these parts."
30, "Create a function that accepts a function f and a list of values. Return a function that outputs the derivative of f approximated at each value in the list."
31, "Define a function that takes two matrices and returns a function that, when called, outputs the result of matrix multiplication."
32, "Implement a function that accepts two functions f and g, returning a new function that applies f to the input and then g to the result of f (function composition)."
33, "Create a function that accepts a list of functions and a vector, applying each function to the vector and returning a list of results."
34, "Define a function that takes an initial value and a function, iteratively applying the function until a stopping criterion is met."
35, "Implement a function that uses recursion to flatten a deeply nested list of numbers into a single vector."
36, "Create a function that takes two lists of numbers and a function for comparing elements, returning the list of elements that satisfy the comparison criteria."
37, "Write a function that takes a function and a list of lists, applying the function to each list and returning the results in a list format."
38, "Define a function that simulates tossing a coin multiple times. Return a function that outputs the probability of getting a specified number of heads."
39, "Develop a function that accepts two functions, f and g, and a list of values. It should apply f to each element and then apply g to the results, returning the final list."
40, "Write a function that takes a vector of values and returns a function that, given a value x, returns the nearest element in the vector to x."
